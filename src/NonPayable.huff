
/** 
 *  NON PAYABLE HUFF EXERCISE
 *
 *  When a user sends a transaction to a smart contract, they can include ether with the transaction.
 *  In solidity we denote that we wish to accept this ether by either marking the function as payable or adding a payable fallback/receive function to our contract
 *  
 *  The task is to write within the `MAIN` macro below, huff code that reverts if ether is sent with the transaction.
 */

#define macro MAIN() = takes(0) returns(0) {
    callvalue       //[msg.value]
    iszero          //[(1 or 0)]

    //if msg.value is not 0, revert
    valueZeroTrue   //[jumpdest, (1 or 0)]
    jumpi           //[] (if 1, jump to jumpdest, else execute next instruction)

    0x00 0x00 revert

    valueZeroTrue:

    0x00 0x00 return     
}

//With return value:
    // valueZeroTrue:
    //     0x01

    // //Store the result to memory
    // 0x00                //[0x00, 0x01]
    // mstore              //[]

    // //Return value, offset 0, 32 bytes
    // 0x20                //[0x20]
    // 0x00                //[0x00, 0x20] (32 bytes)
    // 0x00 0x00 return     