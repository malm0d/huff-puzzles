/** 
 *  DONATIONS HUFF EXERCISE
 *  
 *  The task is to Implement solidity's "receive" functionality which allows sending ether to a smart contract without any calldata
 *  also have a getter function that returns how much an address has donated. Addresses can donate several times
 */

#define function donated(address) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    //Get function selector from calldata
    0x00 calldataload
    0xE0 shr                //[func_sig (calldata @ 0x00 >> 0xE0)]

    //Check function selector
    __FUNC_SIG(donated)     //[func_sig(donated), func_sig]
    eq                      //[func_sig == func_sig(donated)]
    getDonated              //[getDonated, (1 or 0)]
    jumpi                   //[] (if 1, jump to jumpdest, else continue)

    //else, store msg.sender and msg.value to memory
    callvalue               //[msg.value]
    receive                 //[receive, (n or 0)]
    jumpi                   //[] (if msg.value > 0, jump to receive jumpdest, else continue))

    0x00 dup1 return   

    receive:
        callvalue           //[msg.value]
        caller              //[msg.sender, msg.value]
        sload               //[storedValue, msg.value]
        add                 //[(storedValue + msg.value)]
        caller              //[msg.sender, updatedValue]
        sstore              //[] -> key-value pair in storage
        0x00 dup1 return

    getDonated:
        0x04 calldataload   //[address]
        sload               //[balance in storage] -> sload(address) -> value
        0x00 mstore         //[]
        0x20 0x00 return

}