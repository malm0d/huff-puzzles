
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)

#define macro MULTIPLY() = takes(2) returns(1) {
    //Load function args from calldata
    0x04                    //[0x04] (4 bytes offset for function selector)
    calldataload            //[calldata @ 0x04] (first 32 bytes)
    0x24                    //[0x24, calldata @ 0x04] (second 32 bytes)
    calldataload            //[calldata @ 0x24, calldata @ 0x04]

    //if second arg is 0, return 0
    dup1                    //[arg2, arg2, arg1]
    iszero                  //[(1 or 0), arg2, arg1]
    multipl                //[multiply, (1 or 0), arg2, arg1]
    jumpi                   //[arg2, arg1] (if 1, jump to multiply, else next instruction)

    //Perform safe multiplication.
    //Invariant-ish: ((arg1 * arg2) / arg2) == arg1
    //If this returns false, it means there was an overflow since the operation cannot
    //be reversed by division to get the original arg1.
    dup2                    //[arg1, arg2, arg1]
    dup2                    //[arg2, arg1, arg2, arg1]
    dup1                    //[arg2, arg2, arg1, arg2, arg1]
    dup3                    //[arg1, arg2, arg2, arg1, arg2, arg1]
    mul                     //[(arg1 * arg2), arg2, arg1, arg2, arg1]
    div                     //[((arg1 * arg2) / arg2), arg1, arg2, arg1]
    eq                      //[(((arg1 * arg2) / arg2) == arg1), arg2, arg1]
    multipl                //[multiply, (1 or 0), arg2, arg1]
    jumpi                   //[arg2, arg1] (if 1, jump to multiply, else next instruction)

    //Revert if safe multiplication fails
    0x00 0x00 revert

    //Jump label
    //In the case where the second arg is 0, we just multiply anyway
    //NOTE: We cant use the same "multiply" label as the main macro (actually why?)
    multipl:
        mul                 //[arg2 * arg1]
}

#define macro MAIN() = takes(0) returns(0) {
    //Get function selector from calldata
    0x00                    //[0x00] (0 offset)
    calldataload            //[calldata @ 0x00]
    0xE0                    //[0xE0, calldata @ 0x00]
    shr                     //[func_sig (calldata @ 0x00 >> 0xE0)]

    //Check if function selector is for multiply
    __FUNC_SIG(multiply)    //[func_sig(multiply), func_sign]
    eq                      //[func_sig(multiply) == func_sign] => [1] or [0] (true or false)
    multiply                //[multiply, (1 or 0)]
    jumpi                   //[] (if 1, jump to multiply, else next instruction)

    //Revert if function selector is not recognized
    0x00 dup1 revert

    //Jump label with macro
    multiply:
        MULTIPLY()

    //Store result to memory to return
    0x00                    //[0x00, result]
    mstore                  //[]

    //Return result
    0x20                    //[0x20]
    0x00                    //[0x00, 0x20] (32 bytes)
    return
}